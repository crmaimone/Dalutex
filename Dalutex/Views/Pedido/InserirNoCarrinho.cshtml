@model Dalutex.Models.InserirNoCarrinhoViewModel

@{
    ViewBag.Title = "Inserir no carrinho";
}
<h1 class="viewTitle">@ViewBag.Title</h1>
<div class="panel panel-default">
    <h5>D:@Model.Desenho V:@Model.Variante A:@Model.Artigo T:@Model.TecnologiaPorExtenso</h5>
</div>
<div class="container">
    <div class="row">
        <div class="col-md-8">
            <section id="InserirCarrinhoForm">
                @using (Html.BeginForm("InserirNoCarrinho", "Pedido", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    <h4>Dados da venda:</h4>
                    <hr />
                    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
                    if (Model.ObterTipoPedido)
                    {
                        <div class="form-group">
                            @Html.LabelFor(x => x.IDTipoPedido, new { @class = "col-md-4 control-label" })
                            <div class="col-md-8">
                                @Html.DropDownListFor(m => m.IDTipoPedido, new SelectList(Model.TiposPedido, "TIPOPEDIDO", "DESCRICAO"), "Selecione", new { @id = "lstTiposPedido" })
                                @Html.ValidationMessageFor(m => m.IDTipoPedido, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    <div class="form-group">
                        @Html.LabelFor(x => x.Pecas, new { @class = "col-md-4 control-label" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(x => x.Pecas, new { id = "txtPecas", @class = "form-control", @placeholder = "" })
                            @Html.ValidationMessageFor(m => m.Pecas, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Quantidade, new { @class = "col-md-4 control-label", id = "lblQuantidade" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(x => x.Quantidade, new { id = "txtQuantidade", disabled = "disabled", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Quantidade, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    <div class="form-group">
                        @Html.LabelFor(x => x.Preco, new { @class = "col-md-4 control-label", @placeholder = "" })
                        <div class="col-md-8">
                            @Html.TextBoxFor(x => x.Preco, new { id = "txtPreco", @class = "form-control" })
                            @Html.ValidationMessageFor(m => m.Preco, "", new { @class = "text-danger" })
                        </div>
                    </div>
                    @Html.HiddenFor(x => x.Desenho)
                    @Html.HiddenFor(x => x.Variante)
                    @Html.HiddenFor(x => x.Artigo)
                    @Html.HiddenFor(x => x.TecnologiaPorExtenso)
                    @Html.HiddenFor(x => x.UnidadeMedida, new { id = "hidUM" })
                    @Html.HiddenFor(x => x.ValorPadrao, new { id = "hidValPadrao" })

                    <div class="form-group">
                        <div class="col-md-offset-2 col-md-10">
                            <input type="submit" value="Incluir" class="btn btn-default" />
                            <a class="btn btn-default right" href="javascript:history.back()">Voltar</a>
                        </div>
                    </div>
                }
            </section>
        </div>
    </div>
</div>@section Scripts {
    <script>
        $(document).ready(function () {
            //API
            scriptWrapper = (function () {

                //API Attributes
                txtPecas_Blur = function()
                {
                    var $txtPecas = $("#txtPecas");
                    var $txtQuantidade = $("#txtQuantidade");
                    var $hidPadrao = $("#hidValPadrao");

                    if (isNaN($txtPecas.val())) {
                        $txtQuantidade.val(0);
                        return;
                    }

                    if (isNaN($hidPadrao.val())) {
                        $txtQuantidade.val(0);
                        return;
                    }

                    $txtQuantidade.val($txtPecas.val() * $hidPadrao.val());
                }

                //API Methods

                // public API
                return {
                    txtPecas_Blur : txtPecas_Blur
                };
            })();

            //Init
            (function Init() {
                $('#lstTiposPedido').selectpicker();
                $("#lblQuantidade").text($("#hidUM").val());
                $("#txtPecas").blur(this.txtPecas_Blur);

                $("#txtPecas").focus(function () {
                    this.select();
                });
                $("#txtPreco").focus(function () {
                    this.select();
                });
            })();
        });
    </script>
}
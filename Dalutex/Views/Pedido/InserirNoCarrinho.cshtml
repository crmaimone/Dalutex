@model Dalutex.Models.InserirNoCarrinhoViewModel
@using Dalutex.Models;

@{
    ViewBag.Title = "ADICIONAR AO CARRINHO";
}
<div class="header-title"><h3>@ViewBag.Title</h3></div>
<div>
    @if (Model.Tipo == Enums.ItemType.Estampado || Model.Tipo == Enums.ItemType.ValidacaoReserva)
    {
        <div class="panel panel-default">
            <h5><strong>Artigo:</strong>&nbsp;@Model.Artigo 
            | <strong>TecnologiA:</strong>&nbsp;@Model.TecnologiaPorExtenso 
            | <strong>Desenho:</strong>&nbsp;@Model.Desenho 
            | <strong>Variante:</strong>&nbsp;@Model.Variante</h5>
        </div>
        
    }
    else if (Model.Tipo == Enums.ItemType.Liso)
    {
        <div class="panel panel-default">
            <h5><strong>Artigo:</strong>&nbsp;@Model.Artigo
            |<strong>Tecnologia:</strong>&nbsp;@Model.TecnologiaPorExtenso 
            |<strong>Cor:</strong>&nbsp;@Model.Cor</h5>
        </div>
    }
    else if (Model.Tipo == Enums.ItemType.Reserva)
    {
        <div class="panel panel-default">               
            <p><strong>Código de studio:</strong>&nbsp;@Model.CodStudio</p>
            <p><strong>Código Dal:</strong>&nbsp;@Model.CodDal</p>
            <p><strong>Desenho:</strong>&nbsp;@Model.Desenho</p>               
        </div>
    }
</div>
<div class="container">
    <div class="row">
        <div class="col-md-8">
            <section id="InserirCarrinhoForm">
                @using (Html.BeginForm("InserirNoCarrinho", "Pedido", null, FormMethod.Post, new { @class = "form-horizontal", role = "form" }))
                {
                    @Html.AntiForgeryToken()
                    @Html.ValidationSummary(false, "", new { @class = "text-danger" })
                    
                    if (Model.Tipo != Enums.ItemType.Reserva)
                    {
                        if (Model.ObterTipoPedido)
                        {
                            <div class="form-group">
                                @Html.LabelFor(x => x.IDTipoPedido, new { @class = "col-md-4 control-label" })
                                <div class="col-md-8">
                                    @Html.DropDownListFor(m => m.IDTipoPedido, new SelectList(Model.TiposPedido, "TIPOPEDIDO", "DESCRICAO"), "Selecione", new { @id = "lstTiposPedido" })
                                    @Html.ValidationMessageFor(m => m.IDTipoPedido, "", new { @class = "text-danger" })
                                </div>
                            </div>
                        }
                        <hr />
                        <div class="form-group">
                            @Html.LabelFor(x => x.Pecas, new { @class = "col-md-4 control-label" })
                            <div class="col-md-8">
                                @if (Model.IDTipoPedido == 0)
                                {
                                    @Html.TextBoxFor(x => x.Pecas, new { id = "txtPecas", @class = "form-control", @placeholder = "Qtde de Peças" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.Pecas, new { id = "txtPecas", disabled = "disabled", @class = "form-control", @placeholder = "Qtde de Peças" })
                                }

                                @Html.ValidationMessageFor(m => m.Pecas, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Quantidade, new { @class = "col-md-4 control-label", id = "lblQuantidade" })
                            <div class="col-md-8">
                                @if (Model.IDTipoPedido == 0)
                                {
                                    @Html.TextBoxFor(x => x.Quantidade, new { id = "txtQuantidade", disabled = "disabled", @class = "form-control" })
                                }
                                else
                                {
                                    @Html.TextBoxFor(x => x.Quantidade, new { id = "txtQuantidade", @class = "form-control" })
                                }
                                @Html.ValidationMessageFor(m => m.Quantidade, "", new { @class = "text-danger" })
                            </div>
                        </div>
                        <div class="form-group">
                            @Html.LabelFor(x => x.Preco, new { @class = "col-md-4 control-label", @placeholder = "Valor Unitário" })
                            <div class="col-md-8">
                                @Html.TextBoxFor(x => x.Preco, new { id = "txtPreco", @class = "form-control" })
                                @Html.ValidationMessageFor(m => m.Preco, "", new { @class = "text-danger" })
                            </div>
                        </div>
                    }
                    else
                    {
                        <h5>Clique em INCLUIR para adicionar este item desenho ao carrinho.</h5>
                    }
                    <input type="hidden" name="Tipo" value="@Model.Tipo" />
                    <input type="hidden" name="Desenho" value="@Model.Desenho" />
                    <input type="hidden" name="Variante" value="@Model.Variante" />
                    <input type="hidden" name="Artigo" value="@Model.Artigo" />
                    <input type="hidden" name="TecnologiaPorExtenso" value="@Model.TecnologiaPorExtenso" />
                    <input type="hidden" name="TecnologiaOriginal" value="@Model.TecnologiaOriginal" />
                    <input type="hidden" name="Reduzido" value="@ViewBag.POGReduzido" />
                    <input type="hidden" name="Modo" value="@Model.Modo" />
                    <input type="hidden" name="IDColecao" value="@Model.IDColecao" />
                    <input type="hidden" name="IDTipoPedido" value="@Model.IDTipoPedido" />
                    <input type="hidden" name="NMColecao" value="@Model.NMColecao" />
                    <input type="hidden" name="Pagina" value="@Model.Pagina" />
                    <input type="hidden" name="Cor" value="@Model.Cor" />
                    <input type="hidden" name="RGB" value="@Model.RGB" />
                    <input type="hidden" name="CodStudio" value="@Model.CodStudio" />
                    <input type="hidden" name="CodDal" value="@Model.CodDal" />
                    <input type="hidden" name="IDStudio" value="@Model.IDStudio" />
                    <input type="hidden" name="IDItemStudio" value="@Model.IDItemStudio" />
                    <input type="hidden" name="UnidadeMedida" id="hidUM" value="@Model.UnidadeMedida" />
                    <input type="hidden" name="ValorPadrao" id="hidValPadrao" value="@Model.ValorPadrao ">
                    <input type="hidden" name="IDVariante" value="@Model.IDVariante" />
                    <input type="hidden" name="PedidoReserva" value="@Model.PedidoReserva" />
                    <input type="hidden" name="ItemPedidoReserva" value="@Model.ItemPedidoReserva" />
                    <div class="form-group">
                        <div class="col-xs-12">
                            @if (Model.Modo == "I")
                            {
                                <button type="submit" class="btn btn-default pull-right"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span> INCLUIR</button>
                                if (Model.Tipo == Enums.ItemType.Estampado || Model.Tipo == Enums.ItemType.ValidacaoReserva)
                                {
                                    @Html.ActionLink("VOLTAR", "ArtigosDisponiveis", "Pedido",
                                    new
                                    {
                                        desenho = Model.Desenho,
                                        variante = Model.Variante,
                                        idcolecao = Model.IDColecao,
                                        nmcolecao = Model.NMColecao,
                                        pagina = Model.Pagina,
                                        pedidoreserva = Model.PedidoReserva,
                                        idvariante = Model.IDVariante,
                                        itempedidoreserva = Model.ItemPedidoReserva,
                                        tipo = ((int)Model.Tipo).ToString()
                                    },
                                         new { @class = "btn btn-default pull-left" })
                                }
                                else if (Model.Tipo == Enums.ItemType.Liso)
                                {
                                    @Html.ActionLink("VOLTAR", "Lisos", "Pedido",
                                    new
                                    {
                                        idcolecao = Model.IDColecao,
                                        nmcolecao = Model.NMColecao,
                                        pagina = Model.Pagina
                                    },
                                    new { @class = "btn btn-default pull-left"  })
                                }
                                else if (Model.Tipo == Enums.ItemType.Reserva)
                                {
                                    @Html.ActionLink("VOLTAR", "ItensParaReserva", "Pedido",
                                    new
                                    {
                                        pagina = Model.Pagina
                                    },
                                    new { @class = "btn btn-default pull-left" })
                                }
                            }
                            else if (Model.Modo == "A")
                            {
                                <button type="submit" class="btn btn-default pull-right"><span class="glyphicon glyphicon-arrow-down" aria-hidden="true"></span> ALTERAR</button>
                                @Html.ActionLink("VOLTAR", "Carrinho", "Pedido", null, new { @class = "btn btn-default pull-left" })
                            }
                        </div>
                    </div>
                }
            </section>
        </div>
    </div>
</div>
@section Scripts {
    <script>
        $(document).ready(function () {
            //API
            scriptWrapper = (function () {

                //API Attributes
                txtPecas_Blur = function()
                {
                    var $txtPecas = $("#txtPecas");
                    var $txtQuantidade = $("#txtQuantidade");
                    var $hidPadrao = $("#hidValPadrao");

                    if (isNaN($txtPecas.val())) {
                        $txtQuantidade.val(0);
                        return;
                    }

                    if (isNaN($hidPadrao.val())) {
                        $txtQuantidade.val(0);
                        return;
                    }

                    $txtQuantidade.val($txtPecas.val() * $hidPadrao.val());
                }

                txtQuantidade_Blur = function () {
                    var $txtPecas = $("#txtPecas");
                    var $txtQuantidade = $("#txtQuantidade");
                    var $hidPadrao = $("#hidValPadrao");

                    if (isNaN($txtQuantidade.val())) {
                        $txtPecas.val(0);
                        return;
                    }

                    if (isNaN($hidPadrao.val())) {
                        $txtPecas.val(0);
                        return;
                    }

                    $txtPecas.val($txtQuantidade.val() / $hidPadrao.val());
                }

                lstTiposPedido_Change = function () {
                    if ($("#lstTiposPedido > option:selected").attr("value") != "0") {
                        $("#txtPecas").val("0")
                        $("#txtPecas").prop('disabled', true);
                        $("#txtQuantidade").prop('disabled', false);
                    }
                    else {
                        $("#txtQuantidade").val("0")
                        $("#txtPecas").prop('disabled', false);
                        $("#txtQuantidade").prop('disabled', true);
                    }

                    //Buscar novos minimos e máximos
                }

                //API Methods

                // public API
                return {
                    txtPecas_Blur: txtPecas_Blur,
                    txtQuantidade_Blur: txtQuantidade_Blur,
                    lstTiposPedido_Change: lstTiposPedido_Change
                };
            })();

            //Init
            (function Init() {
                $('#lstTiposPedido').selectpicker();
                $("#lblQuantidade").text($("#hidUM").val());
                $("#txtPecas").blur(this.txtPecas_Blur);
                $("#txtQuantidade").blur(this.txtQuantidade_Blur);

                $("#txtPecas").focus(function () {
                    this.select();
                });
                $("#txtPreco").focus(function () {
                    this.select();
                });
                $('#lstTiposPedido').on('change', scriptWrapper.lstTiposPedido_Change);
            })();
        });
    </script>
}